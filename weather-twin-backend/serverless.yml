org: vebrasmusic
app: weather-twin
service: weather-twin-backend
frameworkVersion: '3'

useDotenv: true # Load .env files
provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}

# environment: 
  # the .env for the backend should be in the root of the service folder
  # these are accessible to FUNCTIONS
    # LOOPS_API_KEY: ${env:LOOPS_API_KEY} (example with env)
    # MIXPANEL_TOKEN: ${self:custom.MIXPANEL_TOKEN.${self:provider.stage}} (example with custom)

# iamRoleStatements:
  # IAM Role Statements define the permissions for the Lambda function.
  # Each statement has an Effect, Action, and Resource. 
  # 'Effect' is either 'Allow' or 'Deny', stating whether the action is allowed or denied.
  # 'Action' is the specific AWS service action for which permissions are being stated.
  # 'Resource' is the AWS resource upon which the action is performed.
  # Here, we are allowing the Lambda function to list all SageMaker training jobs, etc.
  # The '*' in the Resource field means that the permission applies to all resources of the specified type.

  # The Resource URLs in the IAM Role Statements are ARNs (Amazon Resource Names) which uniquely identify AWS resources.
  # They are constructed based on the resource type, region, AWS account ID, and the resource name/ID.
  # For example, the ARN for an SQS queue would be constructed as follows:
  # arn:aws:sqs:<region>:<account-id>:<queue-name>
  # Similarly, for a DynamoDB table, it would be:
  # arn:aws:dynamodb:<region>:<account-id>:table/<table-name>
  # These ARNs are used in the 'Resource' field of IAM Role Statements to specify which resources the Lambda function has permissions to interact with.
  # To obtain these ARNs, you can navigate to the specific service dashboard in the AWS Management Console and find the ARN associated with the resource.
  # Alternatively, you can use AWS CLI commands or AWS SDKs to retrieve the ARNs programmatically.
    # - Effect: Allow
    #   Action:
    #     - sagemaker:ListTrainingJobs
    #   Resource: '*'

# custom:
# The 'custom' section in serverless.yml is used to define variables that can be reused throughout the configuration.
# This helps in avoiding repetition and makes the configuration easier to maintain.
# Variables defined here can be referenced in other parts of the serverless.yml file using the ${self:custom.VARIABLE_NAME} syntax.

# The variables below are bucket names, table names, and other resource identifiers that are prefixed with a string and suffixed with the deployment stage.
# This convention helps in distinguishing resources between different environments like development (dev) and production (prod).
# For example, 'hihat-output-storage-bucket-${self:provider.stage}' will resolve to 'hihat-output-storage-bucket-dev' in the development stage.

# The variables are also used to construct ARNs (Amazon Resource Names) for resources which are required in IAM role statements to grant necessary permissions.
# For instance, 'arn:aws:s3:::${self:custom.OutputStorageBucketName}/*' in an IAM role statement would grant access to all objects in the output storage bucket for the current stage.

# Additionally, there are variables for third-party service API keys and secrets, such as Stripe and Mixpanel, which are sensitive and should not be hard-coded.
# These are fetched from environment variables which can be set in a .env file or in the environment where the serverless application is deployed.
# The syntax ${env:VARIABLE_NAME} is used to fetch these values.

# The 'STRIPE_REDIRECT_BASE_URL' and 'BASE_URL' variables have different values for 'prod' and 'dev' stages, which are used to construct URLs for different environments.
# Similarly, 'CognitoUserPoolID', 'CognitoUserPoolClientID', and other Cognito-related variables have stage-specific values for the Cognito user pool configuration.

# The 'SampleEmbeddingQueueURL' variable is the URL for an SQS queue, which is used by the application to process sample embeddings.
# This URL is also stage-specific and is constructed using the AWS account ID and the queue name variable.

# The 'pythonRequirements' variable is likely used for defining Python dependencies for Lambda functions that run Python code.
# However, without further context or the rest of the serverless.yml file, it's unclear how this variable is used. (it allows u to also package python lambdas but i never got to it)
# It could be part of a plugin configuration or a custom script that installs Python packages during the deployment process.

  # OutputStorageBucketName: hihat-output-storage-bucket-${self:provider.stage}
  
  # STRIPE_REDIRECT_BASE_URL:
  #   prod: https://hihat.ai
  #   dev: http://localhost:3000

functions:
  match-city:
    handler: src/cities.matchCities
    events:
      - http:
          path: /cities/match
          method: get
          cors:
            origins:
              - '*'
              # - "https://weathertwin.xyz"
              # - "http://localhost:3000"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent

